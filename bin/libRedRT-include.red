
red: context [
    #include %$ROOT-PATH$runtime/definitions.reds 
    #include %$ROOT-PATH$runtime/macros.reds 
    #include %$ROOT-PATH$runtime/datatypes/structures.reds 
    cell!: alias struct! [
        header [integer!] 
        data1 [integer!] 
        data2 [integer!] 
        data3 [integer!]
    ] 
    series-buffer!: alias struct! [
        flags [integer!] 
        node [int-ptr!] 
        size [integer!] 
        offset [cell!] 
        tail [cell!]
    ] 
    root-base: as cell! 0 
    get-root: func [
        idx [integer!] 
        return: [red-block!]
    ] [
        as red-block! root-base + idx
    ] 
    get-root-node: func [
        idx [integer!] 
        return: [node!] 
        /local 
        obj [red-object!]
    ] [
        obj: as red-object! get-root idx 
        obj/ctx
    ] 
    #import [libRedRT-file stdcall [
            boot: "red/boot" [] 
            get-build-date: "red/get-build-date" [return: [c-string!]] 
            copy-cell: "red/copy-cell" [src [cell!] dst [cell!] return: [cell!]] 
            get-root-node2: "red/get-root-node2" [idx [integer!] return: [pointer! [integer!]]] 
            type-check-alt: "red/type-check-alt" [ref [cell!] expected [red-typeset!] index [integer!] arg [cell!] return: [cell!]] 
            type-check: "red/type-check" [expected [red-typeset!] index [integer!] arg [cell!] return: [cell!]] 
            set-int-path*: "red/set-int-path*" [parent [cell!] index [integer!]] 
            eval-int-path*: "red/eval-int-path*" [parent [cell!] index [integer!] return: [cell!]] 
            set-path*: "red/set-path*" [parent [cell!] element [cell!]] 
            eval-path*: "red/eval-path*" [parent [cell!] element [cell!]] 
            eval-int-path: "red/eval-int-path" [parent [cell!] index [integer!] return: [cell!]] 
            eval-path: "red/eval-path" [parent [cell!] element [cell!] return: [cell!]] 
            select-key*: "red/select-key*" [sub? [logic!] fetch? [logic!] return: [cell!]] 
            alloc-bytes: "red/alloc-bytes" [size [integer!] return: [pointer! [integer!]]] 
            f_routine: "exec/f_routine" [] 
            f_also: "exec/f_also" [] 
            f_attempt: "exec/f_attempt" [] 
            f_comment: "exec/f_comment" [] 
            f_quit: "exec/f_quit" [] 
            f_empty?: "exec/f_empty?" [] 
            f_??: "exec/f_??" [] 
            f_probe: "exec/f_probe" [] 
            f_quote: "exec/f_quote" [] 
            f_first: "exec/f_first" [] 
            f_second: "exec/f_second" [] 
            f_third: "exec/f_third" [] 
            f_fourth: "exec/f_fourth" [] 
            f_fifth: "exec/f_fifth" [] 
            f_last: "exec/f_last" [] 
            f_spec-of: "exec/f_spec-of" [] 
            f_body-of: "exec/f_body-of" [] 
            f_words-of: "exec/f_words-of" [] 
            f_class-of: "exec/f_class-of" [] 
            f_values-of: "exec/f_values-of" [] 
            f_action?: "exec/f_action?" [] 
            f_bitset?: "exec/f_bitset?" [] 
            f_binary?: "exec/f_binary?" [] 
            f_block?: "exec/f_block?" [] 
            f_char?: "exec/f_char?" [] 
            f_datatype?: "exec/f_datatype?" [] 
            f_email?: "exec/f_email?" [] 
            f_error?: "exec/f_error?" [] 
            f_file?: "exec/f_file?" [] 
            f_float?: "exec/f_float?" [] 
            f_function?: "exec/f_function?" [] 
            f_get-path?: "exec/f_get-path?" [] 
            f_get-word?: "exec/f_get-word?" [] 
            f_hash?: "exec/f_hash?" [] 
            f_image?: "exec/f_image?" [] 
            f_integer?: "exec/f_integer?" [] 
            f_issue?: "exec/f_issue?" [] 
            f_lit-path?: "exec/f_lit-path?" [] 
            f_lit-word?: "exec/f_lit-word?" [] 
            f_logic?: "exec/f_logic?" [] 
            f_map?: "exec/f_map?" [] 
            f_native?: "exec/f_native?" [] 
            f_none?: "exec/f_none?" [] 
            f_object?: "exec/f_object?" [] 
            f_op?: "exec/f_op?" [] 
            f_pair?: "exec/f_pair?" [] 
            f_paren?: "exec/f_paren?" [] 
            f_path?: "exec/f_path?" [] 
            f_percent?: "exec/f_percent?" [] 
            f_refinement?: "exec/f_refinement?" [] 
            f_routine?: "exec/f_routine?" [] 
            f_set-path?: "exec/f_set-path?" [] 
            f_set-word?: "exec/f_set-word?" [] 
            f_string?: "exec/f_string?" [] 
            f_tag?: "exec/f_tag?" [] 
            f_time?: "exec/f_time?" [] 
            f_typeset?: "exec/f_typeset?" [] 
            f_tuple?: "exec/f_tuple?" [] 
            f_unset?: "exec/f_unset?" [] 
            f_url?: "exec/f_url?" [] 
            f_vector?: "exec/f_vector?" [] 
            f_word?: "exec/f_word?" [] 
            f_any-list?: "exec/f_any-list?" [] 
            f_any-block?: "exec/f_any-block?" [] 
            f_any-function?: "exec/f_any-function?" [] 
            f_any-object?: "exec/f_any-object?" [] 
            f_any-path?: "exec/f_any-path?" [] 
            f_any-string?: "exec/f_any-string?" [] 
            f_any-word?: "exec/f_any-word?" [] 
            f_series?: "exec/f_series?" [] 
            f_number?: "exec/f_number?" [] 
            f_immediate?: "exec/f_immediate?" [] 
            f_scalar?: "exec/f_scalar?" [] 
            f_context: "exec/f_context" [] 
            f_alter: "exec/f_alter" [] 
            f_offset?: "exec/f_offset?" [] 
            f_repend: "exec/f_repend" [] 
            f_replace: "exec/f_replace" [] 
            f_zero?: "exec/f_zero?" [] 
            f_math: "exec/f_math" [] 
            f_charset: "exec/f_charset" [] 
            f_on-parse-event: "exec/f_on-parse-event" [] 
            f_parse-trace: "exec/f_parse-trace" [] 
            f_suffix?: "exec/f_suffix?" [] 
            f_load: "exec/f_load" [] 
            f_save: "exec/f_save" [] 
            f_cause-error: "exec/f_cause-error" [] 
            f_pad: "exec/f_pad" [] 
            f_mod: "exec/f_mod" [] 
            f_modulo: "exec/f_modulo" [] 
            f_eval-set-path: "exec/f_eval-set-path" [] 
            f_to-red-file: "exec/f_to-red-file" [] 
            f_dir?: "exec/f_dir?" [] 
            f_normalize-dir: "exec/f_normalize-dir" [] 
            f_what-dir: "exec/f_what-dir" [] 
            f_change-dir: "exec/f_change-dir" [] 
            f_list-dir: "exec/f_list-dir" [] 
            f_make-dir: "exec/f_make-dir" [] 
            f_to-image: "exec/f_to-image" [] 
            f_hex-to-rgb: "exec/f_hex-to-rgb" [] 
            f_within?: "exec/f_within?" [] 
            f_overlap?: "exec/f_overlap?" [] 
            f_extract: "exec/f_extract" [] 
            f_extract-boot-args: "exec/f_extract-boot-args" [] 
            f_collect: "exec/f_collect" [] 
            f_flip-exe-flag: "exec/f_flip-exe-flag" [] 
            f_split: "exec/f_split" [] 
            f_dirize: "exec/f_dirize" [] 
            f_clean-path: "exec/f_clean-path" [] 
            f_split-path: "exec/f_split-path" [] 
            f_do-file: "exec/f_do-file" [] 
            f_rejoin: "exec/f_rejoin" [] 
            f_ctx151~platform: "exec/f_ctx151~platform" [octx [pointer! [integer!]]] 
            f_ctx176~interpreted?: "exec/f_ctx176~interpreted?" [octx [pointer! [integer!]]] 
            f_ctx187~on-change*: "exec/f_ctx187~on-change*" [octx [pointer! [integer!]]] 
            f_ctx185~on-change*: "exec/f_ctx185~on-change*" [octx [pointer! [integer!]]] 
            f_ctx185~on-deep-change*: "exec/f_ctx185~on-deep-change*" [octx [pointer! [integer!]]] 
            f_ctx200~throw-error: "exec/f_ctx200~throw-error" [octx [pointer! [integer!]]] 
            f_ctx200~make-time: "exec/f_ctx200~make-time" [octx [pointer! [integer!]]] 
            f_ctx200~to-word: "exec/f_ctx200~to-word" [octx [pointer! [integer!]]] 
            f_ctx200~pop: "exec/f_ctx200~pop" [octx [pointer! [integer!]]] 
            f_ctx200~store: "exec/f_ctx200~store" [octx [pointer! [integer!]]] 
            f_ctx200~transcode: "exec/f_ctx200~transcode" [octx [pointer! [integer!]]] 
            f_ctx220~on-change*: "exec/f_ctx220~on-change*" [octx [pointer! [integer!]]] 
            f_ctx223~on-change*: "exec/f_ctx223~on-change*" [octx [pointer! [integer!]]] 
            f_ctx223~on-deep-change*: "exec/f_ctx223~on-deep-change*" [octx [pointer! [integer!]]] 
            f_ctx226~do-safe: "exec/f_ctx226~do-safe" [octx [pointer! [integer!]]] 
            f_ctx226~eval-reaction: "exec/f_ctx226~eval-reaction" [octx [pointer! [integer!]]] 
            f_ctx226~on-stack?: "exec/f_ctx226~on-stack?" [octx [pointer! [integer!]]] 
            f_ctx226~check: "exec/f_ctx226~check" [octx [pointer! [integer!]]] 
            f_clear-reactions: "exec/f_clear-reactions" [octx [pointer! [integer!]]] 
            f_dump-reactions: "exec/f_dump-reactions" [octx [pointer! [integer!]]] 
            f_ctx226~is~: "exec/f_ctx226~is~" [octx [pointer! [integer!]]] 
            f_react?: "exec/f_react?" [octx [pointer! [integer!]]] 
            f_react: "exec/f_react" [octx [pointer! [integer!]]] 
            f_ctx237~do-quit: "exec/f_ctx237~do-quit" [octx [pointer! [integer!]]] 
            f_ctx237~throw-error: "exec/f_ctx237~throw-error" [octx [pointer! [integer!]]] 
            f_ctx237~syntax-error: "exec/f_ctx237~syntax-error" [octx [pointer! [integer!]]] 
            f_ctx237~do-safe: "exec/f_ctx237~do-safe" [octx [pointer! [integer!]]] 
            f_ctx237~do-code: "exec/f_ctx237~do-code" [octx [pointer! [integer!]]] 
            f_ctx237~count-args: "exec/f_ctx237~count-args" [octx [pointer! [integer!]]] 
            f_ctx237~func-arity?: "exec/f_ctx237~func-arity?" [octx [pointer! [integer!]]] 
            f_ctx237~fetch-next: "exec/f_ctx237~fetch-next" [octx [pointer! [integer!]]] 
            f_ctx237~eval: "exec/f_ctx237~eval" [octx [pointer! [integer!]]] 
            f_ctx237~do-macro: "exec/f_ctx237~do-macro" [octx [pointer! [integer!]]] 
            f_ctx237~register-macro: "exec/f_ctx237~register-macro" [octx [pointer! [integer!]]] 
            f_ctx237~reset: "exec/f_ctx237~reset" [octx [pointer! [integer!]]] 
            f_ctx237~expand: "exec/f_ctx237~expand" [octx [pointer! [integer!]]] 
            f_expand-directives: "exec/f_expand-directives" [octx [pointer! [integer!]]] 
            f_face?: "exec/f_face?" [] 
            f_size-text: "exec/f_size-text" [] 
            f_set-flag: "exec/f_set-flag" [] 
            f_on-face-deep-change*: "exec/f_on-face-deep-change*" [] 
            f_link-tabs-to-parent: "exec/f_link-tabs-to-parent" [] 
            f_link-sub-to-parent: "exec/f_link-sub-to-parent" [] 
            f_update-font-faces: "exec/f_update-font-faces" [] 
            f_ctx260~on-change*: "exec/f_ctx260~on-change*" [octx [pointer! [integer!]]] 
            f_ctx260~on-deep-change*: "exec/f_ctx260~on-deep-change*" [octx [pointer! [integer!]]] 
            f_ctx264~on-change*: "exec/f_ctx264~on-change*" [octx [pointer! [integer!]]] 
            f_ctx264~on-deep-change*: "exec/f_ctx264~on-deep-change*" [octx [pointer! [integer!]]] 
            f_ctx268~on-change*: "exec/f_ctx268~on-change*" [octx [pointer! [integer!]]] 
            f_ctx271~capture-events: "exec/f_ctx271~capture-events" [octx [pointer! [integer!]]] 
            f_ctx271~awake: "exec/f_ctx271~awake" [octx [pointer! [integer!]]] 
            f_ctx279~init: "exec/f_ctx279~init" [octx [pointer! [integer!]]] 
            f_draw: "exec/f_draw" [] 
            f_ctx283~throw-error: "exec/f_ctx283~throw-error" [octx [pointer! [integer!]]] 
            f_ctx283~process-reactors: "exec/f_ctx283~process-reactors" [octx [pointer! [integer!]]] 
            f_ctx283~calc-size: "exec/f_ctx283~calc-size" [octx [pointer! [integer!]]] 
            f_ctx283~process-draw: "exec/f_ctx283~process-draw" [octx [pointer! [integer!]]] 
            f_ctx283~pre-load: "exec/f_ctx283~pre-load" [octx [pointer! [integer!]]] 
            f_ctx283~add-option: "exec/f_ctx283~add-option" [octx [pointer! [integer!]]] 
            f_ctx283~add-flag: "exec/f_ctx283~add-flag" [octx [pointer! [integer!]]] 
            f_ctx283~fetch-value: "exec/f_ctx283~fetch-value" [octx [pointer! [integer!]]] 
            f_ctx283~fetch-argument: "exec/f_ctx283~fetch-argument" [octx [pointer! [integer!]]] 
            f_ctx283~fetch-options: "exec/f_ctx283~fetch-options" [octx [pointer! [integer!]]] 
            f_ctx283~make-actor: "exec/f_ctx283~make-actor" [octx [pointer! [integer!]]] 
            f_layout: "exec/f_layout" [octx [pointer! [integer!]]] 
            f_do-events: "exec/f_do-events" [] 
            f_do-safe: "exec/f_do-safe" [] 
            f_do-actor: "exec/f_do-actor" [] 
            f_show: "exec/f_show" [] 
            f_unview: "exec/f_unview" [] 
            f_view: "exec/f_view" [] 
            f_center-face: "exec/f_center-face" [] 
            f_dump-face: "exec/f_dump-face" [] 
            f_insert-event-func: "exec/f_insert-event-func" [] 
            f_remove-event-func: "exec/f_remove-event-func" [] 
            f_request-font: "exec/f_request-font" [] 
            f_request-file: "exec/f_request-file" [] 
            f_request-dir: "exec/f_request-dir" [] 
            f_keep: "exec/f_keep" [] 
            cos: "exec/cos" [angle [float!]] 
            sin: "exec/sin" [angle [float!]] 
            tan: "exec/tan" [angle [float!]] 
            acos: "exec/acos" [angle [float!]] 
            asin: "exec/asin" [angle [float!]] 
            atan: "exec/atan" [angle [float!]] 
            quit-return: "exec/quit-return" [status [integer!]] 
            set-quiet: "exec/set-quiet" [word [red-word!] value [cell!]] 
            browse: "exec/browse" [url [red-url!]] 
            shift-right: "exec/shift-right" [data [integer!] bits [integer!]] 
            shift-left: "exec/shift-left" [data [integer!] bits [integer!]] 
            shift-logical: "exec/shift-logical" [data [integer!] bits [integer!]] 
            last-lf?: "exec/last-lf?" [] 
            get-current-dir: "exec/get-current-dir" [] 
            set-current-dir: "exec/set-current-dir" [path [red-string!]] 
            create-dir: "exec/create-dir" [path [red-file!]] 
            exists?: "exec/exists?" [path [red-file!] return: [logic!]] 
            as-color: "exec/as-color" [r [integer!] g [integer!] b [integer!]] 
            as-ipv4: "exec/as-ipv4" [a [integer!] b [integer!] c [integer!] d [integer!]] 
            to-paren: "exec/to-paren" [blk [red-series!]] 
            write-stdout: "exec/write-stdout" [str [red-string!]] 
            __make-sys-object: "exec/__make-sys-object" [] 
            ctx200~make-hm: "exec/ctx200~make-hm" [h [integer!] m [integer!]] 
            ctx200~make-msf: "exec/ctx200~make-msf" [m [integer!] s [float!]] 
            ctx200~make-hms: "exec/ctx200~make-hms" [h [integer!] m [integer!] s [integer!]] 
            ctx200~make-hmsf: "exec/ctx200~make-hmsf" [h [integer!] m [integer!] s [float!]] 
            ctx200~make-binary: "exec/ctx200~make-binary" [start [red-string!] end [red-string!] base [integer!]] 
            ctx200~make-tuple: "exec/ctx200~make-tuple" [start [red-string!] end [red-string!]] 
            ctx200~make-number: "exec/ctx200~make-number" [start [red-string!] end [red-string!] type [red-datatype!]] 
            ctx200~make-float: "exec/ctx200~make-float" [start [red-string!] end [red-string!] type [red-datatype!]] 
            ctx200~make-hexa: "exec/ctx200~make-hexa" [start [red-string!] end [red-string!] return: [integer!]] 
            ctx200~make-char: "exec/ctx200~make-char" [start [red-string!] end [red-string!]] 
            ctx200~push-path: "exec/ctx200~push-path" [stack [red-block!] type [red-datatype!]] 
            ctx200~set-path: "exec/ctx200~set-path" [stack [red-block!]] 
            ctx200~make-word: "exec/ctx200~make-word" [src [red-string!] type [red-datatype!]] 
            ctx200~new-line: "exec/ctx200~new-line" [series [cell!]] 
            ctx208~encode: "exec/ctx208~encode" [img [red-image!]] 
            ctx208~decode: "exec/ctx208~decode" [data [cell!]] 
            ctx211~encode: "exec/ctx211~encode" [img [red-image!]] 
            ctx211~decode: "exec/ctx211~decode" [data [cell!]] 
            ctx214~encode: "exec/ctx214~encode" [img [red-image!]] 
            ctx214~decode: "exec/ctx214~decode" [data [cell!]] 
            ctx217~encode: "exec/ctx217~encode" [img [red-image!]] 
            ctx217~decode: "exec/ctx217~decode" [data [cell!]] 
            event?: "exec/event?" [value [cell!] return: [logic!]] 
            find-flag?: "exec/find-flag?" [facet [cell!] flag [red-word!]] 
            ctx279~get-screen-size: "exec/ctx279~get-screen-size" [id [integer!]] 
            ctx279~size-text: "exec/ctx279~size-text" [face [red-object!] value [cell!]] 
            ctx279~on-change-facet: "exec/ctx279~on-change-facet" [owner [red-object!] word [red-word!] value [cell!] action [red-word!] new [cell!] index [integer!] part [integer!]] 
            ctx279~update-font: "exec/ctx279~update-font" [font [red-object!] flags [integer!]] 
            ctx279~update-para: "exec/ctx279~update-para" [face [red-object!] flags [integer!]] 
            ctx279~destroy-view: "exec/ctx279~destroy-view" [face [red-object!] empty? [logic!]] 
            ctx279~update-view: "exec/ctx279~update-view" [face [red-object!]] 
            ctx279~refresh-window: "exec/ctx279~refresh-window" [hwnd [integer!]] 
            ctx279~show-window: "exec/ctx279~show-window" [id [integer!]] 
            ctx279~make-view: "exec/ctx279~make-view" [face [red-object!] parent [integer!] return: [integer!]] 
            ctx279~to-image: "exec/ctx279~to-image" [face [red-object!]] 
            ctx279~draw-image: "exec/ctx279~draw-image" [image [red-image!] cmds [red-block!]] 
            ctx279~do-event-loop: "exec/ctx279~do-event-loop" [no-wait? [logic!]] 
            ctx279~request-font: "exec/ctx279~request-font" [font [red-object!] mono? [logic!]] 
            ctx279~request-file: "exec/ctx279~request-file" [title [red-string!] name [red-file!] filter [red-block!] save? [logic!] multi? [logic!]] 
            ctx279~request-dir: "exec/ctx279~request-dir" [title [red-string!] dir [red-file!] filter [red-block!] keep? [logic!] multi? [logic!]] 
            throw-draw-error: "exec/throw-draw-error" [cmds [red-block!] cmd [cell!] catch? [logic!]] 
            get-color-int: "exec/get-color-int" [tp [red-tuple!] alpha? [pointer! [integer!]] return: [integer!]] 
            get-float: "exec/get-float" [int [red-integer!] return: [float!]] 
            get-float32: "exec/get-float32" [int [red-integer!] return: [float32!]] 
            reverse-int-array: "exec/reverse-int-array" [array [pointer! [integer!]] count [integer!]] 
            parse-shape: "exec/parse-shape" [cmds [red-block!] DC [pointer! [integer!]] draw? [logic!] catch? [logic!]] 
            parse-draw: "exec/parse-draw" [cmds [red-block!] DC [pointer! [integer!]] catch? [logic!]] 
            do-draw: "exec/do-draw" [handle [pointer! [integer!]] img [red-image!] cmds [red-block!] on-graphic? [logic!] cache? [logic!] paint? [logic!] catch? [logic!]] 
            as-rgba: "exec/as-ipv4" [a [integer!] b [integer!] c [integer!] d [integer!]] 
            f_keys-of: "exec/f_words-of" [] 
            f_atan2: "red/natives/arctangent2*" [check? [logic!]] 
            f_object: "exec/f_context" [] 
            f_halt: "exec/f_quit" [] 
            unset-value: "red/unset-value" [cell!] 
            none-value: "red/none-value" [cell!] 
            true-value: "red/true-value" [cell!] 
            false-value: "red/false-value" [cell!]
        ]] 
    redbin: context [
        #import [libRedRT-file stdcall [
                boot-load: "red/redbin/boot-load" [payload [pointer! [byte!]] keep? [logic!] return: [cell!]]
            ]]
    ] 
    platform: context [
        #import [libRedRT-file stdcall [
                prin*: "red/platform/prin*" [s [c-string!] return: [c-string!]] 
                prin-int*: "red/platform/prin-int*" [i [integer!] return: [integer!]] 
                prin-hex*: "red/platform/prin-hex*" [i [integer!] return: [integer!]] 
                prin-2hex*: "red/platform/prin-2hex*" [i [integer!] return: [integer!]] 
                prin-float*: "red/platform/prin-float*" [f [float!] return: [float!]] 
                prin-float32*: "red/platform/prin-float32*" [f [float32!] return: [float32!]]
            ]]
    ] 
    stack: context [
        #import [libRedRT-file stdcall [
                mark: "red/stack/mark" [fun [red-word!] type [integer!]] 
                mark-native: "red/stack/mark-native" [fun [red-word!]] 
                mark-func: "red/stack/mark-func" [fun [red-word!]] 
                mark-loop: "red/stack/mark-loop" [fun [red-word!]] 
                mark-try: "red/stack/mark-try" [fun [red-word!]] 
                mark-try-all: "red/stack/mark-try-all" [fun [red-word!]] 
                mark-catch: "red/stack/mark-catch" [fun [red-word!]] 
                mark-func-body: "red/stack/mark-func-body" [fun [red-word!]] 
                unwind: "red/stack/unwind" [] 
                unwind-last: "red/stack/unwind-last" [return: [cell!]] 
                reset: "red/stack/reset" [return: [cell!]] 
                keep: "red/stack/keep" [return: [cell!]] 
                push: "red/stack/push" [value [cell!] return: [cell!]] 
                check-call: "red/stack/check-call" [] 
                unroll: "red/stack/unroll" [flags [integer!]] 
                unroll-loop: "red/stack/unroll-loop" [inner? [logic!]] 
                revert: "red/stack/revert" [] 
                adjust-post-try: "red/stack/adjust-post-try" [] 
                pop: "red/stack/pop" [positions [integer!]] 
                arguments: "red/stack/arguments" [cell!] 
                top: "red/stack/top" [cell!] 
                bottom: "red/stack/bottom" [cell!]
            ]] 
        #enum flags! [FRAME_FUNCTION: 16777216]
    ] 
    interpreter: context [
        #import [libRedRT-file stdcall [
                eval-path: "red/interpreter/eval-path" [value [cell!] pc [cell!] end [cell!] set? [logic!] get? [logic!] sub? [logic!] case? [logic!] return: [cell!]]
            ]]
    ] 
    none: context [
        #import [libRedRT-file stdcall [
                push-last: "red/none/push-last" [return: [cell!]] 
                push: "red/none/push" [return: [cell!]]
            ]]
    ] 
    logic: context [
        #import [libRedRT-file stdcall [
                false?: "red/logic/false?" [return: [logic!]] 
                true?: "red/logic/true?" [return: [logic!]] 
                push: "red/logic/push" [value [logic!] return: [red-logic!]] 
                get: "red/logic/get" [value [cell!] return: [logic!]] 
                box: "red/logic/box" [value [logic!] return: [red-logic!]]
            ]]
    ] 
    refinement: context [
        #import [libRedRT-file stdcall [
                push-local: "red/refinement/push-local" [node [pointer! [integer!]] index [integer!] return: [red-refinement!]] 
                push: "red/refinement/push" [w [red-word!]]
            ]]
    ] 
    lit-word: context [
        #import [libRedRT-file stdcall [
                push-local: "red/lit-word/push-local" [node [pointer! [integer!]] index [integer!] return: [red-word!]] 
                push: "red/lit-word/push" [w [red-word!] return: [red-word!]]
            ]]
    ] 
    action: context [
        #import [libRedRT-file stdcall [
                push: "red/action/push" []
            ]]
    ] 
    binary: context [
        #import [libRedRT-file stdcall [
                push: "red/binary/push" [bin [red-binary!]]
            ]]
    ] 
    block: context [
        #import [libRedRT-file stdcall [
                push: "red/block/push" [blk [red-block!]] 
                push-only*: "red/block/push-only*" [size [integer!] return: [red-block!]] 
                insert-thru: "red/block/insert-thru" [] 
                append-thru: "red/block/append-thru" [] 
                rs-head: "red/block/rs-head" [blk [red-block!] return: [cell!]] 
                rs-next: "red/block/rs-next" [blk [red-block!] return: [logic!]] 
                rs-tail?: "red/block/rs-tail?" [blk [red-block!] return: [logic!]] 
                rs-length?: "red/block/rs-length?" [blk [red-block!] return: [integer!]] 
                rs-abs-at: "red/block/rs-abs-at" [blk [red-block!] pos [integer!] return: [cell!]] 
                rs-append: "red/block/rs-append" [blk [red-block!] value [cell!] return: [cell!]]
            ]]
    ] 
    char: context [
        #import [libRedRT-file stdcall [
                push: "red/char/push" [value [integer!] return: [red-char!]]
            ]]
    ] 
    datatype: context [
        #import [libRedRT-file stdcall [
                push: "red/datatype/push" [type [integer!] return: [red-datatype!]]
            ]]
    ] 
    file: context [
        #import [libRedRT-file stdcall [
                push: "red/file/push" [file [red-file!]]
            ]]
    ] 
    float: context [
        #import [libRedRT-file stdcall [
                push: "red/float/push" [value [float!] return: [red-float!]] 
                push64: "red/float/push64" [high [integer!] low [integer!] return: [red-float!]] 
                get: "red/float/get" [value [cell!] return: [float!]] 
                box: "red/float/box" [value [float!] return: [red-float!]]
            ]]
    ] 
    _function: context [
        #import [libRedRT-file stdcall [
                push: "red/_function/push" [spec [red-block!] body [red-block!] ctx [pointer! [integer!]] code [integer!] obj-ctx [pointer! [integer!]] return: [pointer! [integer!]]] 
                init-locals: "red/_function/init-locals" [nb [integer!]]
            ]]
    ] 
    get-path: context [
        #import [libRedRT-file stdcall [
                push: "red/get-path/push" [p [red-block!]]
            ]]
    ] 
    get-word: context [
        #import [libRedRT-file stdcall [
                push: "red/get-word/push" [w [red-word!] return: [red-word!]] 
                get: "red/get-word/get" [word [red-word!] return: [cell!]]
            ]]
    ] 
    integer: context [
        #import [libRedRT-file stdcall [
                push: "red/integer/push" [value [integer!] return: [red-integer!]] 
                get-any*: "red/integer/get-any*" [return: [integer!]] 
                get*: "red/integer/get*" [return: [integer!]] 
                get: "red/integer/get" [value [cell!] return: [integer!]] 
                box: "red/integer/box" [value [integer!] return: [red-integer!]]
            ]]
    ] 
    issue: context [
        #import [libRedRT-file stdcall [
                push: "red/issue/push" [w [red-word!]]
            ]]
    ] 
    lit-path: context [
        #import [libRedRT-file stdcall [
                push: "red/lit-path/push" [p [red-block!]]
            ]]
    ] 
    map: context [
        #import [libRedRT-file stdcall [
                push: "red/map/push" [map [red-hash!]]
            ]]
    ] 
    native: context [
        #import [libRedRT-file stdcall [
                push: "red/native/push" []
            ]]
    ] 
    object: context [
        #import [libRedRT-file stdcall [
                push: "red/object/push" [ctx [pointer! [integer!]] class [integer!] idx-s [integer!] loc-s [integer!] idx-d [integer!] loc-d [integer!] return: [red-object!]] 
                duplicate: "red/object/duplicate" [src [pointer! [integer!]] dst [pointer! [integer!]]] 
                transfer: "red/object/transfer" [src [pointer! [integer!]] dst [pointer! [integer!]]] 
                init-push: "red/object/init-push" [node [pointer! [integer!]] class [integer!] return: [red-object!]] 
                init-events: "red/object/init-events" [ctx [pointer! [integer!]] idx-s [integer!] loc-s [integer!] idx-d [integer!] loc-d [integer!]] 
                loc-fire-on-set*: "red/object/loc-fire-on-set*" [parent [cell!] field [red-word!]] 
                fire-on-set*: "red/object/fire-on-set*" [parent [red-word!] field [red-word!]] 
                unchanged?: "red/object/unchanged?" [word [red-word!] id [integer!] return: [logic!]] 
                unchanged2?: "red/object/unchanged2?" [node [pointer! [integer!]] index [integer!] id [integer!] return: [logic!]]
            ]]
    ] 
    op: context [
        #import [libRedRT-file stdcall [
                push: "red/op/push" []
            ]]
    ] 
    pair: context [
        #import [libRedRT-file stdcall [
                push: "red/pair/push" [x [integer!] y [integer!] return: [red-pair!]]
            ]]
    ] 
    paren: context [
        #import [libRedRT-file stdcall [
                push: "red/paren/push" [paren [red-paren!]]
            ]]
    ] 
    path: context [
        #import [libRedRT-file stdcall [
                push: "red/path/push" [p [red-path!]]
            ]]
    ] 
    percent: context [
        #import [libRedRT-file stdcall [
                push: "red/percent/push" [value [float!] return: [red-float!]] 
                push64: "red/percent/push64" [high [integer!] low [integer!] return: [red-float!]]
            ]]
    ] 
    routine: context [
        #import [libRedRT-file stdcall [
                push: "red/routine/push" [spec [red-block!] body [red-block!] code [integer!] ret-type [integer!] return: [red-routine!]]
            ]]
    ] 
    set-path: context [
        #import [libRedRT-file stdcall [
                push: "red/set-path/push" [p [red-block!]]
            ]]
    ] 
    set-word: context [
        #import [libRedRT-file stdcall [
                push: "red/set-word/push" [w [red-word!] return: [red-word!]] 
                push-local: "red/set-word/push-local" [node [pointer! [integer!]] index [integer!] return: [red-word!]]
            ]]
    ] 
    string: context [
        #import [libRedRT-file stdcall [
                push: "red/string/push" [str [red-string!]] 
                rs-head: "red/string/rs-head" [str [red-string!] return: [pointer! [byte!]]] 
                rs-tail?: "red/string/rs-tail?" [str [red-string!] return: [logic!]] 
                equal?: "red/string/equal?" [str1 [red-string!] str2 [red-string!] op [integer!] match? [logic!] return: [integer!]] 
                rs-make-at: "red/string/rs-make-at" [slot [cell!] size [integer!] return: [red-string!]] 
                get-char: "red/string/get-char" [p [pointer! [byte!]] unit [integer!] return: [integer!]] 
                rs-reset: "red/string/rs-reset" [str [red-string!]] 
                concatenate: "red/string/concatenate" [str1 [red-string!] str2 [red-string!] part [integer!] offset [integer!] keep? [logic!] insert? [logic!]] 
                rs-length?: "red/string/rs-length?" [str [red-string!] return: [integer!]] 
                concatenate-literal: "red/string/concatenate-literal" [str [red-string!] p [c-string!] return: [series-buffer!]] 
                append-char: "red/string/append-char" [s [series-buffer!] cp [integer!] return: [series-buffer!]] 
                insert-char: "red/string/insert-char" [s [series-buffer!] offset [integer!] cp [integer!] return: [series-buffer!]] 
                rs-abs-length?: "red/string/rs-abs-length?" [str [red-string!] return: [integer!]] 
                remove-char: "red/string/remove-char" [str [red-string!] offset [integer!] return: [red-string!]] 
                poke-char: "red/string/poke-char" [s [series-buffer!] p [pointer! [byte!]] cp [integer!] return: [series-buffer!]] 
                remove-part: "red/string/remove-part" [str [red-string!] offset [integer!] part [integer!] return: [red-string!]]
            ]]
    ] 
    tuple: context [
        #import [libRedRT-file stdcall [
                push: "red/tuple/push" [size [integer!] arr1 [integer!] arr2 [integer!] arr3 [integer!] return: [red-tuple!]]
            ]]
    ] 
    typeset: context [
        #import [libRedRT-file stdcall [
                push: "red/typeset/push" [sets [red-typeset!]]
            ]]
    ] 
    unset: context [
        #import [libRedRT-file stdcall [
                push: "red/unset/push" [return: [red-unset!]]
            ]]
    ] 
    url: context [
        #import [libRedRT-file stdcall [
                push: "red/url/push" [url [red-url!]]
            ]]
    ] 
    vector: context [
        #import [libRedRT-file stdcall [
                push: "red/vector/push" [vec [red-vector!]]
            ]]
    ] 
    word: context [
        #import [libRedRT-file stdcall [
                push: "red/word/push" [word [red-word!] return: [red-word!]] 
                get: "red/word/get" [word [red-word!] return: [cell!]] 
                get-local: "red/word/get-local" [node [pointer! [integer!]] index [integer!] return: [cell!]] 
                get-any: "red/word/get-any" [word [red-word!] return: [cell!]] 
                get-in: "red/word/get-in" [node [pointer! [integer!]] index [integer!] return: [cell!]] 
                set-in: "red/word/set-in" [node [pointer! [integer!]] index [integer!] return: [cell!]] 
                set: "red/word/set" [] 
                replace: "red/word/replace" [node [pointer! [integer!]] index [integer!]] 
                from: "red/word/from" [node [pointer! [integer!]] index [integer!] return: [red-word!]] 
                load: "red/word/load" [str [c-string!] return: [red-word!]] 
                push-local: "red/word/push-local" [node [pointer! [integer!]] index [integer!] return: [red-word!]]
            ]]
    ] 
    _context: context [
        #import [libRedRT-file stdcall [
                get: "red/_context/get" [word [red-word!] return: [cell!]] 
                clone: "red/_context/clone" [node [pointer! [integer!]] return: [pointer! [integer!]]] 
                set-integer: "red/_context/set-integer" [word [red-word!] value [integer!] return: [integer!]]
            ]]
    ] 
    _series: context [
        #import [libRedRT-file stdcall [
                copy: "red/_series/copy" [ser [red-series!] new [red-series!] part-arg [cell!] deep? [logic!] types [cell!] return: [red-series!]]
            ]]
    ] 
    symbol: context [
        #import [libRedRT-file stdcall [
                make: "red/symbol/make" [s [c-string!] return: [integer!]]
            ]]
    ] 
    unicode: context [
        #import [libRedRT-file stdcall [
                load-utf8: "red/unicode/load-utf8" [src [c-string!] size [integer!] return: [pointer! [integer!]]]
            ]]
    ] 
    natives: context [
        #import [libRedRT-file stdcall [
                repeat-init*: "red/natives/repeat-init*" [cell [cell!] return: [integer!]] 
                repeat-set: "red/natives/repeat-set" [cell [cell!] value [integer!]] 
                foreach-next-block: "red/natives/foreach-next-block" [size [integer!] return: [logic!]] 
                foreach-next: "red/natives/foreach-next" [return: [logic!]] 
                forall-loop: "red/natives/forall-loop" [return: [logic!]] 
                forall-next: "red/natives/forall-next" [] 
                forall-end: "red/natives/forall-end" [] 
                if*: "red/natives/if*" [check? [logic!]] 
                unless*: "red/natives/unless*" [check? [logic!]] 
                either*: "red/natives/either*" [check? [logic!]] 
                any*: "red/natives/any*" [check? [logic!]] 
                all*: "red/natives/all*" [check? [logic!]] 
                while*: "red/natives/while*" [check? [logic!]] 
                until*: "red/natives/until*" [check? [logic!]] 
                loop*: "red/natives/loop*" [[catch] check? [logic!]] 
                repeat*: "red/natives/repeat*" [check? [logic!]] 
                forever*: "red/natives/forever*" [check? [logic!]] 
                foreach*: "red/natives/foreach*" [check? [logic!]] 
                forall*: "red/natives/forall*" [check? [logic!]] 
                func*: "red/natives/func*" [check? [logic!]] 
                function*: "red/natives/function*" [check? [logic!]] 
                does*: "red/natives/does*" [check? [logic!]] 
                has*: "red/natives/has*" [check? [logic!]] 
                switch*: "red/natives/switch*" [check? [logic!] default? [integer!]] 
                case*: "red/natives/case*" [check? [logic!] all? [integer!]] 
                do*: "red/natives/do*" [check? [logic!] args [integer!] next [integer!] return: [integer!]] 
                get*: "red/natives/get*" [check? [logic!] any? [integer!] case? [integer!]] 
                set*: "red/natives/set*" [check? [logic!] any? [integer!] case? [integer!] _only? [integer!] _some? [integer!]] 
                print*: "red/natives/print*" [check? [logic!]] 
                prin*: "red/natives/prin*" [check? [logic!]] 
                equal?*: "red/natives/equal?*" [check? [logic!] return: [red-logic!]] 
                not-equal?*: "red/natives/not-equal?*" [check? [logic!] return: [red-logic!]] 
                strict-equal?*: "red/natives/strict-equal?*" [check? [logic!] return: [red-logic!]] 
                lesser?*: "red/natives/lesser?*" [check? [logic!] return: [red-logic!]] 
                greater?*: "red/natives/greater?*" [check? [logic!] return: [red-logic!]] 
                lesser-or-equal?*: "red/natives/lesser-or-equal?*" [check? [logic!] return: [red-logic!]] 
                greater-or-equal?*: "red/natives/greater-or-equal?*" [check? [logic!] return: [red-logic!]] 
                same?*: "red/natives/same?*" [check? [logic!] return: [red-logic!]] 
                not*: "red/natives/not*" [check? [logic!]] 
                type?*: "red/natives/type?*" [check? [logic!] word? [integer!] return: [cell!]] 
                reduce*: "red/natives/reduce*" [check? [logic!] into [integer!]] 
                compose*: "red/natives/compose*" [check? [logic!] deep [integer!] only [integer!] into [integer!]] 
                stats*: "red/natives/stats*" [check? [logic!] show [integer!] info [integer!]] 
                bind*: "red/natives/bind*" [check? [logic!] copy [integer!]] 
                in*: "red/natives/in*" [check? [logic!]] 
                parse*: "red/natives/parse*" [check? [logic!] case? [integer!] part [integer!] trace [integer!] return: [integer!]] 
                union*: "red/natives/union*" [check? [logic!] cased [integer!] skip [integer!]] 
                intersect*: "red/natives/intersect*" [check? [logic!] cased [integer!] skip [integer!]] 
                unique*: "red/natives/unique*" [check? [logic!] cased [integer!] skip [integer!]] 
                difference*: "red/natives/difference*" [check? [logic!] cased [integer!] skip [integer!]] 
                exclude*: "red/natives/exclude*" [check? [logic!] cased [integer!] skip [integer!]] 
                complement?*: "red/natives/complement?*" [check? [logic!] return: [red-logic!]] 
                dehex*: "red/natives/dehex*" [check? [logic!] return: [red-string!]] 
                negative?*: "red/natives/negative?*" [check? [logic!] return: [red-logic!]] 
                positive?*: "red/natives/positive?*" [check? [logic!] return: [red-logic!]] 
                max*: "red/natives/max*" [check? [logic!]] 
                min*: "red/natives/min*" [check? [logic!]] 
                shift*: "red/natives/shift*" [check? [logic!] left [integer!] logical [integer!]] 
                to-hex*: "red/natives/to-hex*" [check? [logic!] size [integer!]] 
                sine*: "red/natives/sine*" [check? [logic!] radians [integer!]] 
                cosine*: "red/natives/cosine*" [check? [logic!] radians [integer!]] 
                tangent*: "red/natives/tangent*" [check? [logic!] radians [integer!]] 
                arcsine*: "red/natives/arcsine*" [check? [logic!] radians [integer!]] 
                arccosine*: "red/natives/arccosine*" [check? [logic!] radians [integer!]] 
                arctangent*: "red/natives/arctangent*" [check? [logic!] radians [integer!]] 
                arctangent2*: "red/natives/arctangent2*" [check? [logic!]] 
                NaN?*: "red/natives/NaN?*" [check? [logic!] return: [red-logic!]] 
                log-2*: "red/natives/log-2*" [check? [logic!]] 
                log-10*: "red/natives/log-10*" [check? [logic!]] 
                log-e*: "red/natives/log-e*" [check? [logic!]] 
                exp*: "red/natives/exp*" [check? [logic!]] 
                square-root*: "red/natives/square-root*" [check? [logic!]] 
                construct*: "red/natives/construct*" [check? [logic!] _with [integer!] only [integer!]] 
                value?*: "red/natives/value?*" [check? [logic!]] 
                try*: "red/natives/try*" [check? [logic!] _all [integer!] return: [integer!]] 
                uppercase*: "red/natives/uppercase*" [check? [logic!] part [integer!]] 
                lowercase*: "red/natives/lowercase*" [check? [logic!] part [integer!]] 
                as-pair*: "red/natives/as-pair*" [check? [logic!]] 
                break*: "red/natives/break*" [check? [logic!] returned [integer!]] 
                continue*: "red/natives/continue*" [check? [logic!]] 
                exit*: "red/natives/exit*" [check? [logic!]] 
                return*: "red/natives/return*" [check? [logic!]] 
                throw*: "red/natives/throw*" [check? [logic!] name [integer!]] 
                catch*: "red/natives/catch*" [check? [logic!] name [integer!]] 
                extend*: "red/natives/extend*" [check? [logic!] case? [integer!]] 
                debase*: "red/natives/debase*" [check? [logic!] base-arg [integer!]] 
                to-local-file*: "red/natives/to-local-file*" [check? [logic!] full? [integer!]] 
                wait*: "red/natives/wait*" [check? [logic!] all? [integer!]] 
                checksum*: "red/natives/checksum*" [check? [logic!] _with [integer!]] 
                unset*: "red/natives/unset*" [check? [logic!]] 
                handle-thrown-error: "red/natives/handle-thrown-error" [] 
                now*: "red/natives/now*" [check? [logic!] year [integer!] month [integer!] day [integer!] time [integer!] zone [integer!] date [integer!] weekday [integer!] yearday [integer!] precise [integer!] utc [integer!]]
            ]]
    ] 
    actions: context [
        #import [libRedRT-file stdcall [
                make*: "red/actions/make*" [return: [cell!]] 
                random*: "red/actions/random*" [seed [integer!] secure [integer!] only [integer!] return: [cell!]] 
                reflect*: "red/actions/reflect*" [return: [red-block!]] 
                to*: "red/actions/to*" [return: [cell!]] 
                form*: "red/actions/form*" [part [integer!]] 
                mold*: "red/actions/mold*" [only [integer!] _all [integer!] flat [integer!] part [integer!]] 
                eval-path*: "red/actions/eval-path*" [set? [logic!] return: [cell!]] 
                compare: "red/actions/compare" [value1 [cell!] value2 [cell!] op [comparison-op!] return: [logic!]] 
                absolute*: "red/actions/absolute*" [return: [cell!]] 
                add*: "red/actions/add*" [return: [cell!]] 
                divide*: "red/actions/divide*" [return: [cell!]] 
                multiply*: "red/actions/multiply*" [return: [cell!]] 
                negate*: "red/actions/negate*" [return: [cell!]] 
                power*: "red/actions/power*" [return: [cell!]] 
                remainder*: "red/actions/remainder*" [return: [cell!]] 
                round*: "red/actions/round*" [_to [integer!] even [integer!] down [integer!] half-down [integer!] floor [integer!] ceil [integer!] half-ceil [integer!]] 
                subtract*: "red/actions/subtract*" [return: [cell!]] 
                even?*: "red/actions/even?*" [return: [red-logic!]] 
                odd?*: "red/actions/odd?*" [return: [red-logic!]] 
                and~*: "red/actions/and~*" [return: [cell!]] 
                complement*: "red/actions/complement*" [] 
                or~*: "red/actions/or~*" [return: [cell!]] 
                xor~*: "red/actions/xor~*" [return: [cell!]] 
                append*: "red/actions/append*" [part [integer!] only [integer!] dup [integer!]] 
                at*: "red/actions/at*" [return: [cell!]] 
                back*: "red/actions/back*" [return: [cell!]] 
                change*: "red/actions/change*" [part [integer!] only [integer!] dup [integer!] return: [red-series!]] 
                clear*: "red/actions/clear*" [return: [cell!]] 
                copy*: "red/actions/copy*" [part [integer!] deep [integer!] types [integer!] return: [cell!]] 
                find*: "red/actions/find*" [part [integer!] only [integer!] case-arg [integer!] same-arg [integer!] any-arg [integer!] with-arg [integer!] skip [integer!] last [integer!] reverse [integer!] tail [integer!] match [integer!]] 
                head*: "red/actions/head*" [return: [cell!]] 
                head?*: "red/actions/head?*" [return: [cell!]] 
                index?*: "red/actions/index?*" [return: [cell!]] 
                insert*: "red/actions/insert*" [part [integer!] only [integer!] dup [integer!]] 
                move*: "red/actions/move*" [part [integer!] return: [cell!]] 
                length?*: "red/actions/length?*" [return: [red-integer!]] 
                next*: "red/actions/next*" [return: [cell!]] 
                pick*: "red/actions/pick*" [return: [cell!]] 
                poke*: "red/actions/poke*" [return: [cell!]] 
                put*: "red/actions/put*" [case? [integer!]] 
                remove*: "red/actions/remove*" [part [integer!]] 
                reverse*: "red/actions/reverse*" [part [integer!]] 
                select*: "red/actions/select*" [part [integer!] only [integer!] case-arg [integer!] same-arg [integer!] any-arg [integer!] with-arg [integer!] skip [integer!] last [integer!] reverse [integer!]] 
                sort*: "red/actions/sort*" [case-arg [integer!] skip-arg [integer!] compare [integer!] part [integer!] all-arg [integer!] reverse [integer!] stable [integer!]] 
                skip*: "red/actions/skip*" [return: [cell!]] 
                swap*: "red/actions/swap*" [return: [red-series!]] 
                tail*: "red/actions/tail*" [return: [cell!]] 
                tail?*: "red/actions/tail?*" [return: [cell!]] 
                take*: "red/actions/take*" [part [integer!] deep [integer!] last [integer!] return: [cell!]] 
                trim*: "red/actions/trim*" [head [integer!] tail [integer!] auto [integer!] lines [integer!] _all [integer!] with-arg [integer!] return: [red-series!]] 
                modify*: "red/actions/modify*" [case? [integer!] return: [cell!]] 
                read*: "red/actions/read*" [part [integer!] seek [integer!] binary? [integer!] lines? [integer!] info? [integer!] as-arg [integer!] return: [cell!]] 
                write*: "red/actions/write*" [binary? [integer!] lines? [integer!] info? [integer!] append? [integer!] part [integer!] seek [integer!] allow [integer!] as-arg [integer!] return: [cell!]]
            ]]
    ] 
    image: context [
        #import [libRedRT-file stdcall [
                push: "red/image/push" [img [red-image!]]
            ]]
    ] 
    words: context [
        _body: red/word/load "<body>" 
        _anon: red/word/load "<anon>" 
        _remove: red/word/load "remove" 
        _take: red/word/load "take" 
        _clear: red/word/load "clear" 
        _insert: red/word/load "insert" 
        _poke: red/word/load "poke" 
        _put: red/word/load "put" 
        _moved: red/word/load "moved" 
        _changed: red/word/load "changed" 
        _reverse: red/word/load "reverse" 
        type: red/symbol/make "type" 
        face: red/symbol/make "face" 
        window: red/symbol/make "window" 
        offset: red/symbol/make "offset" 
        key: red/symbol/make "key" 
        picked: red/symbol/make "picked" 
        flags: red/symbol/make "flags" 
        away?: red/symbol/make "away?" 
        down?: red/symbol/make "down?" 
        mid-down?: red/symbol/make "mid-down?" 
        alt-down?: red/symbol/make "alt-down?" 
        aux-down?: red/symbol/make "aux-down?" 
        ctrl?: red/symbol/make "ctrl?" 
        shift?: red/symbol/make "shift?"
    ]
]